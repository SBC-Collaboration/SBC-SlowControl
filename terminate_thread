#https://stackoverflow.com/questions/49663124/cause-python-to-exit-if-any-thread-has-an-exception/49665590

import threading
import sys
import traceback
import os
import signal
import time
from PySide2 import QtCore,QtWidgets



class myclass(QtCore.QObject):
    def __init__(self,  parent = None):
        super().__init__(parent)
        self.string = '()*^(*)'
    @QtCore.Slot()
    def run(self):
        self.Running = True
        while self.Running:
            print(self.string[0])
            self.string = self.string[1:]
            time.sleep(1)

    @QtCore.Slot()
    def stop(self):
        self.Running = False


class myclass1(QtCore.QObject):
    def __init__(self, parent = None):
        super().__init__(parent)
        self.string = 'short'
        self.count = 0
    @QtCore.Slot()
    def run(self):
        self.Running = True
        while self.Running:
            try:
                print(self.string[0])
                # print(self.count)
                # self.count += 1
                # if self.count == 5:
                #     sendKillSignal(*sys.exc_info())
                self.string = self.string[1:]
                time.sleep(1)
            except:
                sendKillSignal(*sys.exc_info())


    @QtCore.Slot()
    def stop(self):
        self.Running = False

class myclass2(QtCore.QObject):
    def __init__(self, parent = None):
        super().__init__(parent)
        self.string = 'THISISBIGSTRING'
        print(self.string)
    @QtCore.Slot()
    def run(self):
        self.Running = True
        while self.Running:
            print(self.string[0])
            self.string = self.string[1:]
            time.sleep(1)

    @QtCore.Slot()
    def stop(self):
        self.Running = False


class MainClass(QtCore.QObject):
    def __init__(self, parent=None):
        super().__init__(parent)
        print('MainClass')
        App.aboutToQuit.connect(self.StopUpdater)
        self.StartUpdater()


    def StartUpdater(self):
        # self.Mythread = QtCore.QThread()
        # self.Myclass = myclass(string = 'thisisashorttest')
        # self.Myclass.moveToThread(self.Mythread)
        # self.Mythread.started.connect(self.Myclass.run())
        # self.Mythread.start()
        #
        # time.sleep(0.5)
        # self.Mythread2 = QtCore.QThread()
        # self.Myclass2 = myclass(string = 'THISISALONGTEST')
        # self.Myclass2.moveToThread(self.Mythread2)
        # self.Mythread2.started.connect(self.Myclass2.run())
        # self.Mythread2.start()

        self.Mythread = QtCore.QThread()
        self.Myclass = myclass1()
        self.Myclass.moveToThread(self.Mythread)
        self.Mythread.started.connect(self.Myclass.run())
        self.Mythread.start()

        time.sleep(0.5)
        self.Mythread2 = QtCore.QThread()
        self.Myclass2 = myclass2()
        self.Myclass2.moveToThread(self.Mythread2)
        self.Mythread2.started.connect(self.Myclass2.run())
        self.Mythread2.start()

    @QtCore.Slot()
    def StopUpdater(self):
        self.Myclass.stop()
        self.Mythread.quit()
        self.Mythread.wait()

        self.Myclass2.stop()
        self.Mythread2.quit()
        self.Mythread2.wait()



class Update(QtCore.QObject):
    def __init__(self, parent=None):
        super().__init__(parent)
        App.aboutToQuit.connect(self.StopUpdater)
        self.StartUpdater()

    def StartUpdater(self):
        # self.mythread2 = QtCore.QThread()
        # self.myclass2 = myclass2()
        # self.myclass2.moveToThread(self.mythread2)
        # self.mythread2.started.connect(self.myclass2.run())
        # self.mythread2.start()
        #
        # time.sleep(2)
        #
        # self.mythread1 = QtCore.QThread()
        # self.myclass1 = myclass1()
        # self.myclass1.moveToThread(self.mythread1)
        # self.mythread1.started.connect(self.myclass1.run())
        # self.mythread1.start()
        # RUN()!! have to
        install()
        # try:
        #     self.mythread1 = QtCore.QThread()
        #     self.myclass1 = myclass1()
        #     self.myclass1.moveToThread(self.mythread1)
        #     self.mythread1.started.connect(self.myclass1.run)
        #     self.mythread1.start()
        #
        #     # wait for PLC initialization finished
        #     time.sleep(2)
        #
        #     # Update database on another thread
        #     self.mythread2 = QtCore.QThread()
        #     self.myclass2 = myclass2()
        #     self.myclass2.moveToThread(self.mythread2)
        #     self.mythread2.started.connect(self.myclass2.run)
        #     self.mythread2.start()
        # except:
        #     print("send kill signal")
        #     sendKillSignal()


        self.mythread1 = QtCore.QThread()
        self.myclass1 = myclass1()
        self.myclass1.moveToThread(self.mythread1)
        self.mythread1.started.connect(self.myclass1.run)
        self.mythread1.start()

        # wait for PLC initialization finished
        time.sleep(2)

        # Update database on another thread
        self.mythread2 = QtCore.QThread()
        self.myclass2 = myclass2()
        self.myclass2.moveToThread(self.mythread2)
        self.mythread2.started.connect(self.myclass2.run)
        self.mythread2.start()










        # Stop all updater threads
    @QtCore.Slot()
    def StopUpdater(self):
        self.Myclass.stop()
        self.Mythread.quit()
        self.Mythread.wait()

        self.Myclass2.stop()
        self.Mythread2.quit()
        self.Mythread2.wait()


def sendKillSignal(etype, value, tb):
    print('KILL ALL')
    traceback.print_exception(etype, value, tb)
    os.kill(os.getpid(), signal.SIGKILL)


original_init = QtCore.QThread.__init__
def patched_init(self, *args, **kwargs):
    print("thread init'ed")
    original_init(self, *args, **kwargs)
    original_run = self.run
    def patched_run(*args, **kwargs):
        try:
            original_run(*args, **kwargs)
        except:
            sys.excepthook(*sys.exc_info())
    self.run = patched_run
QtCore.QThread.__init__ = patched_init



def install():
    sys._excepthook = sys.excepthook
    sys.excepthook = sendKillSignal
    QtCore.QThread.__init__ = patched_init






if __name__ == '__main__':
    install()
    App = QtWidgets.QApplication(sys.argv)

    # MC = MainClass()
    Update=Update()
    sys.exit(App.exec_())
