#https://stackoverflow.com/questions/49663124/cause-python-to-exit-if-any-thread-has-an-exception/49665590

import threading
import sys
import traceback
import os
import signal
import time
from PySide2 import QtCore

def countdown(initial):
    while True:
        print(initial[0])
        initial = initial[1:]
        time.sleep(1)

def sendKillSignal(etype, value, tb):
    print('KILL ALL')
    traceback.print_exception(etype, value, tb)
    os.kill(os.getpid(), signal.SIGKILL)


original_init = QtCore.QThread.__init__
def patched_init(self, *args, **kwargs):
    print("thread init'ed")
    original_init(self, *args, **kwargs)
    original_run = self.run
    def patched_run(*args, **kw):
        try:
            original_run(*args, **kw)
        except:
            sys.excepthook(*sys.exc_info())
    self.run = patched_run


def install():
    sys.excepthook = sendKillSignal
    QtCore.QThread.__init__ = patched_init

class Mythread(QtCore.QThread):
    def __init__(self, target=None):
        super().__init__()
        self.target = target
    def run(self):
        if self.target:
            self.target()




if __name__ == '__main__':
    install()
    helper = Mythread(target=countdown('FAST'))
    helper.start()
    time.sleep(0.5)
    #countdown('THISWILLTAKELONGERTOFAILBECAUSEITSMOREDATA')
    # countdown('FAST')